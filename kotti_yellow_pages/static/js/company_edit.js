// Generated by CoffeeScript 1.6.1
/**
 * CompanyEdit view controller
 * @param {ng.Scope} $scope Controller scope
 * @param {ng.$http} $http  AngularJS HTTP service
 * @param {L.map}    map    Map object with tileLayer and additional
 *                          latLngForAddress method.
*/

var Address, CompanyEditCtrl;

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

Address = (function() {

  Address.prototype.complete = false;

  function Address(_street, _zipcode, _city, _country) {
    this._street = _street != null ? _street : '';
    this._zipcode = _zipcode != null ? _zipcode : '';
    this._city = _city != null ? _city : '';
    this._country = _country != null ? _country : '';
  }

  Address.property('street', {
    get: function() {
      return this._street;
    },
    set: function(_street) {
      this._street = _street;
      return this.updateComplete();
    }
  });

  Address.property('zipcode', {
    get: function() {
      return this._zipcode;
    },
    set: function(_zipcode) {
      this._zipcode = _zipcode;
      return this.updateComplete();
    }
  });

  Address.property('city', {
    get: function() {
      return this._city;
    },
    set: function(_city) {
      this._city = _city;
      return this.updateComplete();
    }
  });

  Address.property('country', {
    get: function() {
      return this._country;
    },
    set: function(_country) {
      this._country = _country;
      return this.updateComplete();
    }
  });

  Address.prototype.updateComplete = function() {
    if (this._street && this._zipcode && this._city && this._country) {
      return this.complete = true;
    } else {
      return this.complete = false;
    }
  };

  return Address;

})();

CompanyEditCtrl = function($scope, $http, $log, map) {
  var handleLocationChange;
  $scope.location = new L.LatLng(0, 0);
  $scope.map = map;
  $scope.map.setView($scope.location, 6);
  $scope.marker = L.marker($scope.location, {
    draggable: true
  }).addTo($scope.map);
  /**
   * Pass the address from the scope to the latLngForAddress service method and
   * update location if a geolocation is returned by the API endpoint.
  */

  $scope.locateAddress = function() {
    $log.info("Updating location from scope.address...");
    if (!$scope.addressSubform.$valid) {
      return false;
    }
    map.latLngForAddress($scope.company.address).then(function(latLng) {
      if (latLng) {
        $scope.company.location.lat = latLng.lat;
        $scope.company.location.lng = latLng.lng;
        return $scope.setMarkerFromLocation();
      }
    });
    return false;
  };
  /**
   * Update the marker position with the location from the scope.  Also update
   * the corresponding input fields' values.
  */

  $scope.setMarkerFromLocation = function() {
    $log.info("Updating marker position and form field values from scope.location...");
    $scope.marker.setLatLng($scope.company.location);
    $scope.map.panTo($scope.company.location);
    $scope.map.setZoom(14);
    return false;
  };
  $scope.marker.on("dragend", function(e) {
    return $scope.$apply(function() {
      $scope.company.location.lat = e.target._latlng.lat;
      return $scope.company.location.lng = e.target._latlng.lng;
    });
  });
  $scope.$watch('addressSubform.$valid', function() {});
  handleLocationChange = function() {
    var l;
    $log.info("handleLocationChange");
    l = $scope.company.location;
    if (!(l && l.lat && l.lng)) {
      return false;
    }
    if (!L.LatLng.isPrototypeOf($scope.company.location)) {
      $scope.company.location = new L.LatLng(l.lat, l.lng);
    }
    return $scope.setMarkerFromLocation();
  };
  $scope.$watch('company.location.lat', handleLocationChange, false);
  return $scope.$watch('company.location.lng', handleLocationChange, false);
};
