// Generated by CoffeeScript 1.6.1
/**
 * kotti_yellow_pages AngularJS application
 * @type {angular.module}
*/

var app;

app = angular.module("kotti_yellow_pages", []);

/**
 * mapquest service
 * @return {object}
*/


app.factory("mapquest", function($log, $http) {
  var mapquest;
  return mapquest = {
    /**
     * tile layer for use in Leaflet maps
     * @type {L.tileLayer}
    */

    tileLayer: L.tileLayer("http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.jpeg", {
      attribution: 'Tiles Courtesy of <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      subdomains: "1234"
    }),
    /**
     * MapQuest API key
     * @type {String}
    */

    key: "Fmjtd%7Cluub2q0znd%2Cas%3Do5-9u7sda",
    /**
     * Return a geolocation for the given address
     * @param  {object} address Object with street, zipcode, city and country
     *                          properties, each of which is of type String.
     * @return {promise}        The callback of the promise object has to
     *                          expect a single argument that can be either
     *                          {false} if no geolocation was found for the
     *                          given address properties or a {L.LatLng}
     *                          object containing the geolocation.
    */

    latLngForAddress: function(address) {
      var base_url, city, country, params, promise, street, zipcode;
      $log.info("Requesting geolocation from MapQuest API endpoint...");
      base_url = "http://open.mapquestapi.com/geocoding/v1/address?key=" + mapquest.key;
      street = address.street ? "" + address.street : "";
      zipcode = address.zipcode ? "" + address.zipcode : "";
      city = address.city ? "" + address.city : "";
      country = address.country ? "" + address.country : "";
      address = "" + street + ", " + zipcode + " " + city + ", " + country;
      $log.info("Constructed addresss: " + address);
      params = {
        inFormat: "kvp",
        outFormat: "json",
        callback: "JSON_CALLBACK",
        location: address
      };
      $log.info(params);
      promise = $http.jsonp(base_url, {
        params: params
      }).then(function(response) {
        var latlng, locations, results;
        $log.info("Received response from MapQuest API endpoint...");
        if (response.status !== 200) {
          $log.error("ERROR (status=" + response.status + ")");
        }
        results = response.data.results;
        if (results.length !== 1) {
          $log.warn("response.data contains " + results.length + " results.");
          return false;
        }
        locations = results[0].locations;
        if (locations.length !== 1) {
          $log.warn("results[0] contains " + locations.length + " locations.");
          return false;
        }
        latlng = locations[0].latLng;
        latlng = new L.LatLng(latlng.lat, latlng.lng);
        return latlng;
      });
      return promise;
    }
  };
});

/**
 * map service
 * @param  {service} mapquest A service providing a tileLayer and
 *                            latLngForAddress method.
 * @param  {service} $http    AngularJS http service
 * @return {L.map}            A map configured with a tileLayer that
 *                            also provides a latLngForAddress method.
*/


app.factory("map", function($log, mapquest) {
  var map;
  $log.info("Initializing map... ");
  map = L.map("map", {
    zoomControl: true
  });
  map.latLngForAddress = mapquest.latLngForAddress;
  mapquest.tileLayer.addTo(map);
  return map;
});

/**
 * controlGroup directive
 * @return {factory} directive factory
*/


app.directive('controlGroup', function() {
  var controlGroup;
  controlGroup = {
    controller: function() {},
    restrict: 'A',
    scope: {
      controlGroup: "@",
      title: "@",
      required: "@",
      ngModel: "="
    },
    template: "<label class=\"control-label\" for=\"{{controlGroup}}\">\n  <span>{{title}}</span>\n  <span class=\"req\" ng-show=\"required\">*</span>\n</label>\n<div class=\"controls\">\n  <span ng-transclude></span>\n  <span class=\"help-inline\">{{$parent.errors[controlGroup]}}</span>\n</div>",
    replace: false,
    transclude: true,
    link: function(scope, elem, attrs) {
      elem.addClass('control-group');
      if (scope.$parent.errors) {
        if (scope.$parent.errors[attrs.controlGroup]) {
          return elem.addClass('error');
        }
      }
    }
  };
  return controlGroup;
});
