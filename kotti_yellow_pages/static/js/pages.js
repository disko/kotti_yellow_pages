// Generated by CoffeeScript 1.6.2
var PagesCtrl,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

PagesCtrl = function($scope, $http, $window, $log, $q, map) {
  var branchesInitialized, companiesInitialized, initBranches, initCompanies, initMap;

  $scope.safeApply = function(fn) {
    var phase;

    phase = this.$root.$$phase;
    if (phase === '$apply' || phase === '$digest') {
      if (fn && (typeof fn === 'function')) {
        return fn();
      }
    } else {
      return this.$apply(fn);
    }
  };
  /**
   * Initialize the company objects.
  */

  initCompanies = function() {
    var b, branch, company, marker, _branch_names, _i, _j, _len, _len1, _ref, _ref1, _results;

    $log.info("initCompanies");
    _ref = $scope.companies;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      company = _ref[_i];
      _branch_names = (function() {
        var _j, _len1, _ref1, _results1;

        _ref1 = company.branches;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          b = _ref1[_j];
          if (b.selected === true) {
            _results1.push(b.title);
          }
        }
        return _results1;
      })();
      company.branches = (function() {
        var _j, _len1, _ref1, _ref2, _results1;

        _ref1 = $scope.branches;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          b = _ref1[_j];
          if (_ref2 = b.title, __indexOf.call(_branch_names, _ref2) >= 0) {
            _results1.push(b);
          }
        }
        return _results1;
      })();
      _ref1 = company.branches;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        branch = _ref1[_j];
        branch.companies.push(company);
      }
      company.showDetails = function(show, recurse) {
        var c, _k, _len2, _ref2;

        if (recurse == null) {
          recurse = true;
        }
        if (show === true || show === false) {
          this._showDetails = show;
          if (this.marker) {
            if (show) {
              this.marker.setIcon(this.marker.selectedIcon);
            } else {
              this.marker.setIcon(this.marker.defaultIcon);
            }
          }
        }
        if (show && recurse) {
          _ref2 = $scope.companies;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            c = _ref2[_k];
            if (c !== this) {
              c.showDetails(false, false);
            }
          }
        }
        return this._showDetails;
      };
      company.onClick = function(e) {
        $log.info("click");
        return $scope.safeApply(function() {
          e.target.setIcon(e.target.selectedIcon);
          map.panTo(e.target.company.latlng);
          e.target.company.showDetails(true);
          return $scope.recalcDistances();
        });
      };
      if (!company.marker && company.location.lat && company.location.lng) {
        company.latlng = new L.LatLng(company.location.lat, company.location.lng);
        marker = new L.marker(company.latlng, {
          title: company.title,
          riseOnHover: true,
          riseOffset: 1000
        });
        marker.company = company;
        marker.defaultIcon = map.makeIcon({
          color: 'darkblue',
          icon: 'question-sign'
        });
        marker.hoverIcon = map.makeIcon({
          color: 'blue',
          icon: 'info-sign'
        });
        marker.selectedIcon = map.makeIcon({
          color: 'red',
          icon: 'star'
        });
        marker.setIcon(marker.defaultIcon);
        marker.on("click", company.onClick);
        marker.on("mouseover", function(e) {
          var _ref2;

          marker = e.target;
          if ((_ref2 = marker.options.icon) !== marker.selectedIcon && _ref2 !== marker.hoverIcon) {
            return marker.setIcon(marker.hoverIcon);
          }
        });
        marker.on("mouseout", function(e) {
          var _ref2;

          marker = e.target;
          if ((_ref2 = marker.options.icon) !== marker.selectedIcon && _ref2 !== marker.defaultIcon) {
            return marker.setIcon(marker.defaultIcon);
          }
        });
        company.marker = marker;
      }
      /**
       * Determine if the company shoul be visible in the application's current
       * state.
       * @return {bool} true: visible, false: invisible
      */

      company.visible = function() {
        var anyBranchVisible, inMapBounds;

        anyBranchVisible = __indexOf.call((function() {
          var _k, _len2, _ref2, _results1;

          _ref2 = this.branches;
          _results1 = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            b = _ref2[_k];
            _results1.push(b.visible);
          }
          return _results1;
        }).call(this), true) >= 0;
        inMapBounds = this.latlng && $scope.map.getBounds().contains(this.latlng);
        return anyBranchVisible && inMapBounds;
      };
      /**
       * Determine the distance to the current center of the map.
       * @return {int} Distance in km
      */

      company.distanceToMapCenter = function() {
        if (!(this.latlng && $scope.mapCenter)) {
          return this.distance = null;
        }
        return this.distance = Math.round(this.latlng.distanceTo($scope.mapCenter) / 1000, 10);
      };
      /**
       * Determine the distance to the location provided by the user.
       * @return {int} Distance in km
      */

      _results.push(company.distanceToUser = function() {
        if (!(this.latlng && $scope.user.latlng)) {
          return this.distance = null;
        }
        return this.distance = Math.round(this.latlng.distanceTo($scope.user.latlng) / 1000, 10);
      });
    }
    return _results;
  };
  $scope.distanceToMapCenter = function(company) {
    if (company.distanceToMapCenter) {
      return company.distanceToMapCenter();
    } else {
      return false;
    }
  };
  $scope.distanceToZipcode = function(company) {
    if (company.distanceToUser) {
      return company.distanceToUser();
    } else {
      return false;
    }
  };
  $scope.companyName = function(company) {
    return company.title;
  };
  $scope.companyZipcode = function(company) {
    return company.zipcode;
  };
  $scope.companyListOrder = function(company) {
    if (!$scope.listOrderBy) {
      $scope.listOrderBy = 'companyZipcode';
    }
    return $scope[$scope.listOrderBy](company);
  };
  $scope.recalcDistances = function() {
    var c, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = companies.length; _i < _len; _i++) {
      c = companies[_i];
      if (c.distanceToMapCenter) {
        _results.push(c.distanceToMapCenter());
      }
    }
    return _results;
  };
  /**
   * Initialize the branch obejcts.
  */

  initBranches = function() {
    var branch, c, _i, _len, _ref, _results;

    $log.info("initBranches");
    _ref = $scope.branches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      branch = _ref[_i];
      _results.push(branch.bounds = new L.LatLngBounds((function() {
        var _j, _len1, _ref1, _results1;

        _ref1 = branch.companies;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c.latlng) {
            _results1.push(c.latlng);
          }
        }
        return _results1;
      })()));
    }
    return _results;
  };
  /**
   * Initialize the map.
  */

  initMap = function() {
    var b;

    $log.info("initMap");
    $window.map = $scope.map = map;
    map.on('load moveend dragend zoomend', function(e) {
      return $scope.safeApply(function() {
        $scope.map.getBounds();
        $scope.mapCenter = $scope.map.getCenter();
        return $scope.recalcDistances();
      });
    });
    map.bounds = new L.LatLngBounds((function() {
      var _i, _len, _ref, _results;

      _ref = $scope.branches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        _results.push(b.bounds);
      }
      return _results;
    })());
    return map.fitBounds(map.bounds);
  };
  $scope.updateBranchesVisible = function() {
    var branch, company, _i, _len, _ref, _results;

    $log.info("updateBranchesVisible");
    _ref = $scope.branches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      branch = _ref[_i];
      _results.push((function() {
        var _j, _len1, _ref1, _results1;

        _ref1 = branch.companies;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          company = _ref1[_j];
          if (company.marker) {
            if (branch.visible && !map.hasLayer(company.marker)) {
              map.addLayer(company.marker);
            }
            if (!branch.visible && map.hasLayer(company.marker)) {
              _results1.push(map.removeLayer(company.marker));
            } else {
              _results1.push(void 0);
            }
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };
  branchesInitialized = $q.defer();
  /**
   * Wait for the branches object to appear on the scope, then resolve the
   * branchesInitialized promise.
  */

  $scope.$watch('branches', function(branches) {
    $log.info("Got " + branches.length + " branches.");
    $window.branches = branches;
    return branchesInitialized.resolve();
  });
  companiesInitialized = $q.defer();
  /**
   * Wait for the companies object to appear on the scope, then resolve the
   * companiesInitialized promise.
  */

  $scope.$watch('companies', function(companies) {
    $log.info("Got " + companies.length + " companies.");
    $window.companies = companies;
    return companiesInitialized.resolve();
  });
  /**
   * Wait for the branchesInitialized and companiesInitialized promises to be
   * resolved, then initialize the application.
  */

  return $q.all([branchesInitialized.promise, companiesInitialized.promise]).then(function() {
    $log.info("Initializing...");
    initCompanies();
    initBranches();
    initMap();
    $scope.listOrderBy = 'distanceToMapCenter';
    $window.user = $scope.user = {
      zipcode: 47877,
      country: 'DE'
    };
    map.latLngForAddress($scope.user).then(function(response) {
      var latlng, location, locations;

      if (response.length > 0) {
        locations = response[0].locations;
        if (locations.length > 0) {
          location = response[0].locations[0];
          latlng = location.latLng;
          return $scope.user.latlng = new L.LatLng(latlng.lat, latlng.lng);
        }
      }
    });
    return $scope.updateBranchesVisible();
  });
};
